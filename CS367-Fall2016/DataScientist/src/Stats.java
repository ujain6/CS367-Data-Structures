import java.util.ArrayList;
import java.util.List;

/**
 * Stores statistics generated by the evaluation methods of the 
 * SetTesterMain class.
 * 
 * A single Stats object should be created for each SetTester 
 * data structure you wish to compare.
 * 
 * Add stats for each operation as they are generated.
 * Each list item is the time it took to complete that particular
 * evaluation operation.
 * 
 * Use the getBuildMean(), getContainsSearchMean(), and getRangeSearchMean()
 * method to get the average of all trials added for that operation.
 * 
 * @author CS367
 */
class Stats {

	/** List of build trial run times (milliseconds). */
	List<Double> buildStats;

	/** List of containsSearch trial run times (milliseconds) */
	List<Double> containsSearchStats;

	/** List of rangeSearch trial run times (milliseconds) */
	List<Double> rangeSearchStats;

	/** 
	 * Create place to store timing results for build and search times
	 * for a given data structure.
	 */
	public Stats(){
		buildStats = new ArrayList<>();
		containsSearchStats = new ArrayList<>();
		rangeSearchStats = new ArrayList<>();
	}

	/**
	 * Add one evaluation trial result (time) for building structure.
	 *
	 * @param time The time in milliseconds to build (add data) structure
	 */
	public void addBuildStat(double time){
		buildStats.add(time);
	}

	/**
	 * Add one evaluation trial result (time) for contains search.
	 *
	 * @param time The time in milliseconds  to contains search
	 */
	public void addContainsSearchStat(double time){
		containsSearchStats.add(time);
	}

	/**
	 * Add one evaluation trial result (time) for the range search.
	 *
	 * @param time The time in milliseconds to range search
	 */
	public void addRangeSearchStat(double time){
		rangeSearchStats.add(time);
	}

	/**
	 * Return the average(mean) time of building (filling structure with data)
	 * @return mean time in milliseconds to build (add data) data structure
	 */
	public double getBuildMean(){
		return getMean(buildStats);
	}

	/**
	 * Return the average(mean) time of contains search
	 * @return mean time in milliseconds of contains search
	 */
	public double getContainsSearchMean(){
		return getMean(containsSearchStats);
	}

	/**
	 * Return the average(mean) time of range search
	 * @return mean time in milliseconds of range search
	 */
	public double getRangeSearchMean(){
		return getMean(rangeSearchStats);
	}

	/**
	 * Calculate the average time for the operation based on the list
	 * of time entries for that operation.
	 * 
	 * @param stats the list of data entries for that operation
	 * @return the average (mean) time for trials for that operation 
	 */
	private static double getMean(List<Double> stats){
		double mean = 0;
		for ( double num : stats ) {
			mean += num;
		}
		return mean / stats.size();
	}
}
